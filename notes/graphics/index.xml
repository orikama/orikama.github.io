<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Graphics on Vladimir Matushkin</title><link>https://orikama.github.io/notes/graphics/index.html</link><description>Recent content in Graphics on Vladimir Matushkin</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://orikama.github.io/notes/graphics/index.xml" rel="self" type="application/rss+xml"/><item><title>DirectX</title><link>https://orikama.github.io/notes/graphics/directx/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://orikama.github.io/notes/graphics/directx/index.html</guid><description>DirectX 11 Buffers management Constant Buffers without Constant Pain (NVIDIA) Copying and Accessing Resource Data (Direct3D 10) DirectX 12 Implementations
Mini engine, DX12, Path Tracing https://github.com/KaiH0717/KHRay Strong DX12 abstraction? Bindless, Render Graph, Path Tracing DX12 renderer with simple design Has DX11 version, may be I should start with it ??
Swap chain | DXGI_SWAP_CHAIN_DESC DXGI_SWAP_EFFECT Only use DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL or DXGI_SWAP_EFFECT_FLIP_DISCARD DXGI_SWAP_EFFECT For best performance, use DXGI flip model Important part -&amp;gt; What do I have to do to use the flip model?</description></item><item><title>Shaders</title><link>https://orikama.github.io/notes/graphics/shaders/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://orikama.github.io/notes/graphics/shaders/index.html</guid><description> Circle C++ shaders A lot of links to DX/Vulkan samples Shader Effect Language Writing a Shader Effect Language Part 1 nvFX: A Scene and Material Effect Framework for OpenGL https://github.com/tlorach/nvFX Volumetric Light Light shafts Volumetric fog, area lights and tube lights (Unity Adam demo) Volumetric lights found it here</description></item><item><title>Texture</title><link>https://orikama.github.io/notes/graphics/texture/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://orikama.github.io/notes/graphics/texture/index.html</guid><description>MipMap Sharper Mipmapping using Shader Based Supersampling bug, good article Jonathan Blow old articles in The Inner Product journal Mipmapping, Part 1 Mipmapping, Part 2 Common Rendering Mistakes: How to Find Them and How to Fix Them Simultaneous Mipmap Level Generation John Carmack twitter question about Unity/Unreal mipmaps Custom MIP Levels High-performance adaptive texture streaming and rendering of large 3D cities Unity related unity forum, discussion How does the Anisotropic Textures Quality Setting affect each texture&amp;rsquo;s Aniso Level?</description></item><item><title>Vertex Data</title><link>https://orikama.github.io/notes/graphics/vertexdata/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://orikama.github.io/notes/graphics/vertexdata/index.html</guid><description> Vertex data management (Android)
The Benefits of Buffer Packing - Attribute Buffer Encoding (Arm)
Vertex packing
Custom Vertex fetch from SRV (using shaders without input assembler)
Should we get rid of Vertex Buffers? (Wicked Engine) Programmable vertex fetching and index buffering Dynamic vertex pulling with D3D11</description></item><item><title>Vulkan</title><link>https://orikama.github.io/notes/graphics/vulkan/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://orikama.github.io/notes/graphics/vulkan/index.html</guid><description>GameEngines/Renderers
LegitEngine Some nice rendering techniques LegitProfiler Good looking CPU/GPU profiler with ImGui Lol Adventures in Hybrid Rendering https://github.com/diharaw/HybridRendering Liquid Engine https://www.reddit.com/r/GraphicsProgramming/comments/ru1fxc/render_graphs_with_msaa_support/ A beginner-friendly Vulkan path tracing tutorial in under 300 lines of C++
Measuring performance with Nvidia Nsight Vulkan input attachments and sub passes
Getting Faster and Leaner on Mobile: Optimizing Roblox with Vulkan</description></item></channel></rss>